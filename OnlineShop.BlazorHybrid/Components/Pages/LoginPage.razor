@page "/login"
@using Newtonsoft.Json
@using System.Text
@using OnlineShop.BlazorHybrid.Components.Shared
@using OnlineShop.API.Shared.ViewModels
@using OnlineShop.BlazorHybrid.Models
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<a @onclick=NavigateBack>Back</a>
<br />


<div class="text-center">
    <h3>Login</h3>
</div>
    <EditForm Model="loginModel" OnValidSubmit="LoginCommand">
        <DataAnnotationsValidator />
        <div class="mt-2 form-control">
            <label for="Email">Email</label>
            <input type="text" @bind-value="loginModel.Email" class="form-control" id="Email" placeholder="Enter Email">
            <ValidationMessage For="@(() => loginModel.Email)" />
        </div>
        <div class="mt-2 form-control">
            <label for="password">Password</label>
            <input type="password" @bind-value="loginModel.Password" class="form-control" id="password" placeholder="Password">
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>
        <div class="text-center mt-2">
            <button type="submit" class="btn btn-primary">
                <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
                Login
            </button>
        </div>
    </EditForm>
@if (loginFailed)
{
    <CommonDialog ErrorModel=errorModel OnConfirm=OkButtonClicked></CommonDialog>
}

@code {
    LoginModel loginModel = new LoginModel();
    private string _spinnerClass = "";
    private ErrorModel errorModel = new ErrorModel();
    private bool loginFailed = false;
    private string _baseUrl = ConstantHelper.BaseApiUrl;

    private async void LoginCommand()
    {
        try
        {
            _spinnerClass = "spinner-border spinner-border-sm";

            this.StateHasChanged();
            if (string.IsNullOrWhiteSpace(loginModel.Email) || string.IsNullOrWhiteSpace(loginModel.Password))
            {
                _spinnerClass = "";
                return;
            }
            string jsonData = JsonConvert.SerializeObject(loginModel);
            var data = new StringContent(jsonData, Encoding.UTF8, "application/json");
            

            var response = await HttpClient.PostAsync(_baseUrl + "User/login", data);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                var token = JsonConvert.DeserializeObject<AuthenticationResponseDTO>(result);
                if(token!=null)
                {
                    ConstantHelper.Token = token.Token;
                    NavigationManager.NavigateTo("/products");
                }                
            }
            else
            {
                errorModel.MessageTitle = "Login Failed";
                errorModel.Message = "Invalid email or password.";
                loginFailed = true;
                this.StateHasChanged();
            }
            _spinnerClass = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            _spinnerClass = "";
        }
    }    

    private void OkButtonClicked()
    {
        loginFailed = false;
        this.StateHasChanged();
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri.TrimEnd('/') + "/#");
    }
}